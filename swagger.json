{
    "swagger": "2.0",
    "info": {
        "version": "1.0",
        "title": "PropertyPro-Lite",
        "description": "ProperyPro Lite is a platform where people can create and search properties for sale or rent"
    },
    "schemes": [
        "https"
    ],
    "host": "propertypro-lit.herokuapp.com",
    "basePath": "/api/v1",
    "securityDefinitions": {
        "Bearer": {
            "description": "Standard Authorization header using the bearer scheme. Example: \"bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "name": "Auth",
            "description": "Endpoint for Authentication"
        },
        {
            "name": "Users",
            "description": "Endpoint for Users"
        },
        {
            "name": "Property",
            "description": "Endpoint for Property"
        }
    ],
    "paths": {
        "/auth/signup": {
            "post": {
                "description": "Handles sign up",
                "summary": "User can sign up",
                "tags": [
                    "Auth"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "This is the request body object containing user information",
                        "schema": {
                            "$ref": "#/requestBody/signUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Account created successfully"
                    },
                    "400": {
                        "description": "Please fill in the fields"
                    },
                    "409": {
                        "description": "User with email/phone already exists"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "description": "Handles sign in",
                "summary": "User can sign in",
                "tags": [
                    "Auth"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "This is the request body object containing user login information",
                        "schema": {
                            "$ref": "#/requestBody/loginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful"
                    },
                    "400": {
                        "description": "Invalid email or password"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/admin": {
            "get": {
                "description": "Returns the list of users in the system",
                "summary": "Get all users",
                "tags": [
                    "Users"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authorization required"
                    },
                    "403": {
                        "description": "Only an Admin can request for all users"
                    },
                    "404": {
                        "description": "No User Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/admin/{userId}": {
            "delete": {
                "description": "Deletes user with the userId",
                "summary": "Delete a user",
                "tags": [
                    "Users"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "description": "The Id of the user to be deleted"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted sucessfully"
                    },
                    "401": {
                        "description": "Authorization required"
                    },
                    "403": {
                        "description": "Only an Admin can delete users"
                    },
                    "404": {
                        "description": "No User Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/agent": {
            "get": {
                "description": "Returns the list of properties by the agent",
                "summary": "Get all properties posted by a particular Agent",
                "tags": [
                    "Users"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authorization required"
                    },
                    "403": {
                        "description": "Only an Agent can request for his posted property details"
                    },
                    "404": {
                        "description": "Property Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/reset": {
            "post": {
                "description": "Handles password reset",
                "summary": "User can reset password",
                "tags": [
                    "Auth"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [],
                "parameters": [
                    {
                      "in": "body",
                      "name": "body",
                      "required": true,
                      "description": "This is the request body object containing user email for password reset",
                      "schema": {
                        "$ref": "#/requestBody/passwordResetRequest"
                      }
                    }
                  ],
                "responses": {
                    "200": {
                        "description": "Check your email for password reset link"
                    },
                    "400": {
                      "description": "Email is required || Email must be valid"
                    },
                    "404": {
                        "description": "User with email does not exist"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/property/": {
            "post": {
                "description": "Handles Creating/Posting new property",
                "summary": "User (agent) can post a property advert",
                "tags": [
                    "Property"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "This is the request body object containing user login information",
                        "schema": {
                            "$ref": "#/requestBody/propertyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Some fields are empty or invalid data format"
                    },
                    "401": {
                        "description": "Only an Agent can post/create a property"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/property": {
            "get": {
                "description": "Returns the list of properties in the system",
                "summary": "User can view all properties",
                "tags": [
                    "Property"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authorization required"
                    },
                    "404": {
                        "description": "Property Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/property/{propertyid}": {
            "get": {
                "description": "Returns a single property with the specified ID",
                "summary": "User can view a specific property",
                "tags": [
                    "Property"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "propertyid",
                        "required": true,
                        "description": "The Id of the property"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authorization required"
                    },
                    "404": {
                        "description": "Property Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/property?type={propertyType}": {
            "get": {
                "description": "Returns the list of properties by type in the system",
                "summary": "User can view all properties of a specific type - 2 bedroom, 3 bedroom, mini flat etc",
                "tags": [
                    "Property"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "propertyType",
                        "required": true,
                        "description": "The type of the property to search for"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authorization required"
                    },
                    "404": {
                        "description": "Property Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/property/{propertId}": {
            "delete": {
                "description": "Deletes property with the propertyId",
                "summary": "User (agent) can delete an advert",
                "tags": [
                    "Property"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "propertId",
                        "required": true,
                        "description": "The Id of the property to be deleted"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Property delete successfully"
                    },
                    "401": {
                        "description": "Authorization required"
                    },
                    "403": {
                        "description": "Only an Agent can delete a property post"
                    },
                    "404": {
                        "description": "Property Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/property/{propertyId}": {
            "patch": {
                "description": "Updates a single property with the propertyId",
                "summary": "User (agent) can update the details of a property advert",
                "tags": [
                    "Property"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "propertyId",
                        "required": true,
                        "description": "The Id of the property to be updated"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "description": "This is the request body object containing property update",
                        "schema": {
                            "$ref": "#/requestBody/patchPropertyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authorization required"
                    },
                    "403": {
                        "description": "Only an Agent can update a property post"
                    },
                    "404": {
                        "description": "Property Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "schema": {
                        "$ref": "#/requestBody/putPropertyRequest"
                    }
                }
            }
        },
        "/property/{propertyId}/sold": {
            "patch": {
                "description": "Marks a single property with the propertyId",
                "summary": "User (agent) can mark his/her posted advert as sold",
                "tags": [
                    "Property"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "propertyId",
                        "required": true,
                        "description": "The Id of the property to be marked"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "This is the request body object containing new property status update",
                        "schema": {
                            "$ref": "#/requestBody/patchPropertyRequestSold"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authorization required"
                    },
                    "403": {
                        "description": "Only an Agent can mark a property SOLD or AVAILABLE"
                    },
                    "404": {
                        "description": "Property Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "schema": {
                        "$ref": "#/requestBody/patchPropertyRequest"
                    }
                }
            }
        }
    },
    "requestBody": {
        "signUpRequest": {
            "title": "Signup Request",
            "type": "object",
            "properties": {
                "email": {
                    "description": "email of the user",
                    "type": "string"
                },
                "first_name": {
                    "description": "First name of the user",
                    "type": "string"
                },
                "last_name": {
                    "description": "Last name of the user",
                    "type": "string"
                },
                "password": {
                    "description": "The Password of the user",
                    "type": "string"
                },
                "phone_number": {
                    "description": "Phone number of the user",
                    "type": "string"
                },
                "address": {
                    "description": "The address of the user",
                    "type": "string"
                },
                "user_type": {
                    "description": "User type: user or agent",
                    "type": "string"
                },
                "passport_url": {
                    "description": "PassportUrl of the user",
                    "type": "string"
                },
                "is_admin": {
                    "description": "User is Admin: true or false",
                    "type": "string"
                }
            },
            "example": {
                "email": "mike@example.com",
                "first_name": "Mike",
                "last_name": "Smith",
                "password": "password123",
                "phone_number": "07000000000",
                "address": "",
                "user_type": "user",
                "passport_url": "https://example.com/avatar.png",
                "is_admin": "false"
            },
            "required": [
                "phone_number, email, first_name, last_name, password, user_type"
            ]
        },
        "loginRequest": {
            "title": "Login Request",
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email address of the user user",
                    "type": "string"
                },
                "password": {
                    "description": "The Password of the user",
                    "type": "string"
                }
            },
            "example": {
                "email": "mike@example.com",
                "password": "password123"
            },
            "required": [
                "email, password,"
            ]
        },
        "passwordResetRequest": {
            "title": "Password Reset Request",
            "type": "object",
            "properties": {
              "email": {
                "description": "Email address of the user user",
                "type": "string"
              }
            },
            "example": {
              "email": "mike@example.com"
            },
            "required": [
              "email"
            ]
          },
        "propertyRequest": {
            "title": "Create Property Request",
            "type": "object",
            "properties": {
                "property_name": {
                    "description": "The name of the property",
                    "type": "string"
                },
                "status": {
                    "description": "The status of the property e.g sold or available",
                    "type": "string"
                },
                "price": {
                    "description": "The price of the property e.g 200,000",
                    "type": "string"
                },
                "state": {
                    "description": "The state where the property is located",
                    "type": "string"
                },
                "city": {
                    "description": "The particular city in the state",
                    "type": "string"
                },
                "address": {
                    "description": "The direct address of the property",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the property e.g 1 bedroom, 2 bedroom...",
                    "type": "string"
                },
                "image_url": {
                    "description": "The featured image of the property",
                    "type": "string"
                },
                "image_url_2": {
                    "description": "The second featured image of the property",
                    "type": "string"
                },
                "image_url_3": {
                    "description": "The third featured image of the property",
                    "type": "string"
                },
                "description": {
                    "description": "The property description",
                    "type": "string"
                },
                "purpose": {
                    "description": "The property purpose e.g for sale or rent",
                    "type": "string"
                }
            },
            "example": {
                "property_name": "New housing",
                "status": "available",
                "price": "1000",
                "state": "Lagos",
                "city": "Lekki",
                "address": "property address example",
                "type": "4 bedroom",
                "image_url": "https://example.com/property.png",
                "image_url_2": "",
                "image_url_3": "",
                "description": "property description example",
                "purpose": "for sale"
            },
            "required": [
                "property_name, status, price, state, city, address, image_url, description, purpose, type"
            ]
        },
        "patchPropertyRequest": {
            "title": "Update Property",
            "type": "object",
            "properties": {
                "property_name": {
                    "description": "New property name",
                    "type": "string"
                },
                "status": {
                    "description": "New property status",
                    "type": "string"
                },
                "price": {
                    "description": "New property price",
                    "type": "string"
                },
                "state": {
                    "description": "New property state",
                    "type": "string"
                },
                "city": {
                    "description": "New property city",
                    "type": "string"
                },
                "address": {
                    "description": "New property address",
                    "type": "string"
                },
                "type": {
                    "description": "New property type e.g 1 bedroom, 2 bedroom...",
                    "type": "string"
                },
                "image_url": {
                    "description": "New property featured image",
                    "type": "string"
                },
                "image_url_2": {
                    "description": "New property second featured image",
                    "type": "string"
                },
                "image_url_3": {
                    "description": "New property third featured image",
                    "type": "string"
                },
                "description": {
                    "description": "New property description",
                    "type": "string"
                },
                "purpose": {
                    "description": "New property purpose e.g for sale or rent",
                    "type": "string"
                }
            },
            "example": {
                "property_name": "Example updated property name ",
                "status": "sold",
                "price": "000",
                "state": "Example state ",
                "city": "Example city",
                "address": "Example updated property address",
                "type": "Example type",
                "image_url": "",
                "image_url_2": "",
                "image_url_3": "",
                "description": "",
                "purpose": ""
            }
        },
        "patchPropertyRequestSold": {
            "title": "Mark Property Status",
            "type": "object",
            "property": {
                "status": {
                    "description": "New property status [sold, available]",
                    "type": "string"
                }
            },
            "example": {
                "status": "Sold"
            },
            "required": [
                "status"
            ]
        }
    }
}